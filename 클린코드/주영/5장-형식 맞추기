뭐 코드 컨벤션이라고 생각한다.
사실 이 코드 작성 규칙이 지켜져야 코드 작성하는데도 자잘한 고민이 필요하지 않으며 협업 또한 원활히 진행된다고 생각한다.
백엔드 개발로 넘어오면서 처음엔 코드 형식을 맞춰야 한다는 것에 의아했다. 왜냐면 협업을 크게 경험해보지 않았으니까.
내가 일했던 방식은 주로 개인 연구, 알고리즘 개발이 주였기 때문에 남들과 협업이 그렇게 중요하지 않았다. 더욱이, 코드를 공유하는 일이 흔치 않았다.
결과를 공유하고 이 결과를 내는데 중요했던 건 어떤 모델을 썼으며, 어떤 파라미터, 어떤 환경에서 진행했는지가 중요했을 뿐 코드 형식을 세세하게 따지지는 않았다.
세세하게 기능, 모듈 단위로 할 것도, 필요도 없으니까!

백엔드 개발로 넘어오면서는 많이 달랐다. 협업이 중요했고 팀원의 코드를 보고 이해하는게 중요해졌고, 남과 동일한 형식으로 개발하는 것이 중요해졌다.

그래서 굉장히 중요하다고는 생각하지만? 이전에도 지키려고 많이 노력했던 내용들이기에 크게 배우거나 놀란 내용은 없었다.

우선, 형식을 지키는 것의 중요한 이유가 첫번째 페이지에 나온다. 오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 그런데 오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을 미친다.
오랜 시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아놓은 구현 스타일과 가독성 수준은 유지보수 용이성과 확장성에 계속 영향을 미친다.
원래 코드는 사라질지라도 개발자의 스타일과 규율은 사라지지 않는다.

500줄을 넘지 않고 대부분 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다는 사실이다. -> 지금은 컨트롤러 서비스 아키텍처를 통해 개발중인데 사실 볼륨이 커지면 커질수록 파일 자체가 500줄은 훌쩍 넘길 수 있는데 이런 경우는 어떻게 해야할까?

빈 행은 새로운 개념을 시작한다는 시각적 단서다. -> 무의식적으로 이 내용과 같이 생각하며 코딩했지만 이번에 명확히 짚고 넘어간다.
세로 밀집도는 연관성을 의미한다. 밀접한 개념, 변수는 세로 위치를 가깝게 작성해야 한다.

가로 형식은 자바 코드 컨벤션을 따르면 될 것 같다.

들여쓰기는 사실 이번 KB 교육을 들으면서 들여쓰기를 안 하는 코드를 꽤 봤는데 좀 어지럽다. 나는 색약이 있어서 그런가 명확하게 들여쓰기가 안 되어 있으면 정말 안 읽힌다. 반드시 들여쓰기는 하도록 하자.

좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄진다는 사실을 기억하기 바란다. 라고 한다.
