
## 함수를 잘 만드는 법

읽기 쉽고 이해하기 쉬운, 의도를 분명히 표현하는 함수는 어떻게 구현할 수 있을까? 함수에 어떤 속성을 부여해야 처음 읽는 사람이 프로그램 내부를 직관적으로 파악할 수 있을까?
책을 읽으며 이해가고 적용해야겠다고 생각했던 내용을 위주로 정리하겟다.

첫째, 작게 만든다. 대표적으로 if문 else, while문 등에 들어가는 블록은 한 줄이어야 한다. 이말인즉, 중첩 구조가 생길만큼 함수가 커져서는 안 된다는 뜻이다.
둘째, 1,2장에서도 계속해서 언급했듯이 한 가지 역할만 해야한다. "함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다."
   함수가 '한 가지'만 하는지 판단하는 방법이 있다. 단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.
셋째, 함수당 추상화 수준은 하나로. 함수가 확실히 '한 가지' 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다. 한 함수 내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다.
넷째, 서술적인 이름을 사용하라. 함수가 하는 일을 좀 더 잘 표현하려 노력한다. 코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드다. 길고 서술적인 이름이 길고 서술적인 주석보다 좋다.
#### 다섯째, 함수 인수. 함수에서 이상적인 인수 개수는 0개(무항)이다.
다섯째, 부수 효과를 일으키지 마라. 때로는 예상치 못하게 클래스 변수를 수정한다. 때로는 함수로 넘어온 인수나 시스템 전역 변수를 수정한다. -> 함수 이름만 보고 함수를 호출하는 사용자는 사용자를 인증하면서 기존 세션 정보를 지워버릴 위험에 처한다.
여섯째, 명령과 조회를 분리하라. 함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다. 
일곱째, 오류 처리도 한 가지 작업이다. 함수는 '한 가지' 작업만 해야 한다. 오류 처리도 '한 가지'작업에 속한다. 
여덟째, 중복하지 마라.
아홉째, 구조적 프로그래밍. 루프 안에서 break나 continue를 사용해선 안 되며 goto는 절대로, 절대로 안 된다.
